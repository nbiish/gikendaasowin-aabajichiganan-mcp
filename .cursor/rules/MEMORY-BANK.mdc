---

# Chain-of-Draft Agile Memory Prompt for AI Pair Programming

## 1. Core Principles

- **Minimalism:** Capture only the critical information—no redundancy.
- **Chain of Draft:** For every user request, generate minimal intermediate drafts (reasoning steps) before producing the final answer or code.
- **Condensed Reasoning:** Summarize reasoning, focusing on essential insights and next actions.

---

## 2. Project Context via Memory Bank

- **ALWAYS** begin by reading all Memory Bank files (`projectbrief.md`, `productContext.md`, `systemPatterns.md`, `techContext.md`, `activeContext.md`, `progress.md`).  
- **After each session or major change**, update relevant files, especially `activeContext.md` and `progress.md`.
- **If a user requests "update memory bank",** review every file and clarify current state, next steps, and any new patterns or learnings in draft form before finalizing.

---

## 3. Agile MVP Requirement Drafting

- **Use CoD for Requirement Analysis:**  
  1. Draft a bullet summary of the request/problem (based on Vision & Goals).
  2. List minimal must-have features (from Core MVP Definition).
  3. Identify what is out of scope.
  4. Suggest success metrics (quantitative/qualitative).
  5. Draft the next feedback/iteration step.

- **Scope LLM responses by referencing headers (e.g., "## Success Metrics")** in both requirements and memory bank context.

---

## 4. Task Execution Flow

### Plan Mode
1. Read all Memory Bank files.
2. If any file is missing/incomplete, draft a plan to fill gaps.
3. Produce a condensed reasoning draft:  
   - Summarize project state.
   - Highlight open problems/goals.
   - Propose immediate strategy.

### Act Mode
1. Confirm current context from Memory Bank.
2. Draft minimal changes for the task.
3. Execute the task/code generation.
4. Update Memory Bank (especially `activeContext.md`, `progress.md`), using condensed reasoning to summarize what changed and why.

---

## 5. Prompting Guide for Pair Programmers

- **Targeted Queries:**  
  - "Based on ## Vision & Goals and current activeContext.md, draft three must-have features."
  - "From progress.md, summarize biggest blockers in one sentence."
  - "Draft a new iteration plan based on recent user feedback (from analytics/interviews)."

- **Refinement Prompts:**  
  - "Generate a condensed reasoning draft for updating systemPatterns.md after recent architecture change."
  - "Draft the single most valuable next action for the team."

---

## 6. Example: Using CoD & Condensed Reasoning

**User Request:** "Add a user registration feature as an MVP."

**LLM Reasoning Chain (Drafts):**
1. **Draft Problem Statement:** Early users need an account to access personalized features (aligns with Vision & Goals).
2. **Draft Must-Have Features:** Registration form, email validation, minimal password policy.
3. **Draft Out-of-Scope:** Social login, multi-factor auth.
4. **Draft Success Metrics:** Registration completion rate, user activation within 24h.
5. **Draft Next Iteration Step:** Collect feedback via onboarding survey; update activeContext.md.

**Final Output:**  
- Minimal registration MVP specification  
- Memory Bank updated with condensed summary of changes

---

## 7. Key Reminders

- Less is more: always prefer sparse, atomic documentation and code.
- The Memory Bank is the only persistent context—keep it precise.
- Use Chain-of-Draft to jot down only essential reasoning steps before final output.
- After every session/reset, rely solely on Memory Bank and condensed reasoning to continue work.

---

## [2025-04-XX] Architectural Refactoring & Bugfix Summary <--(VERIFY and use CURRENT TIME using mcp_time_get_current_time)
- **Major Refactoring**: Changed architecture of `prompt_aider` and `double_compute` tools to act as advisors rather than executors
  - Tools now provide expert guidance on optimal aider commands with proper edit formats
  - Automatically selects best edit format based on aider leaderboard data for current model
  - Includes warnings for missing API keys and dependencies
- Fixed file argument handling in `prompt_aider` and `double_compute` (now uses `--file` flags rather than positional arguments)
- Updated README.md with detailed explanation of architectural changes and improved examples
- Committed all changes and ran dual-publish.sh, successfully building and publishing:
  - @nbiish/giizhendam-aabajichiganan-mcp@0.3.XX
  - @nbiish/ai-tool-mcp@0.3.XX
- The refactored tools now function similar to the `deliberate` MCP tool, providing guidance rather than direct execution
- Project is now compliant with dual-publish.mdc and critical.mdc requirements